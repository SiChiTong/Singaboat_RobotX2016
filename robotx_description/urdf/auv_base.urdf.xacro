<?xml version="1.0"?>
<!-- Revolute-Revolute Manipulator -->
<robot name="auv" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- Constants for robot dimensions -->
    <xacro:property name="PI" value="3.1415926535897931"/>
    <xacro:property name="board_mass" value="0.5" /> 
    <xacro:property name="board_width" value="0.4" /> 
    <xacro:property name="board_thickness" value="0.02" /> 
    <xacro:property name="bouy_mass" value="0.3" /> 
    <xacro:property name="bouy_length" value="0.8" /> 
    <xacro:property name="bouy_radius" value="0.051" /> 
    <xacro:property name="bouy_i_radius" value="0.05" /> 
    <xacro:property name="thruster_mass" value="0.1" /> 
    <xacro:property name="thruster_length" value="0.12" /> 
    <xacro:property name="thruster_radius" value="0.045" /> 
    <xacro:property name="sensor_box_mass" value="0.5" /> 
    <xacro:property name="sensor_box_length" value="0.4" /> 
    <xacro:property name="sensor_box_radius" value="0.06" /> 

    <!-- Import all Gazebo-customization elements, including Gazebo colors -->
    <!--xacro:include filename="materials.xacro" /-->

    <!-- macro for bouys -->
    <xacro:macro name="bouy" params="position">
        <link name="${position}_bouy_link">
            <collision>
                <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
                <geometry>
                    <cylinder length="${bouy_length}" radius="${bouy_radius}"/>
                </geometry>
            </collision>

            <visual>
                <origin xyz="0 0 0" rpy="0 ${PI/2}  0"/>
                <geometry>
                    <cylinder length="${bouy_length}" radius="${bouy_radius}"/>
                </geometry>
                <material name="white"/>
            </visual>

            <inertial>
                <mass value="${bouy_mass}"/>
                <inertia
                    ixx="${bouy_mass / 12.0 * (3*(bouy_radius*bouy_radius + bouy_i_radius*bouy_i_radius) + bouy_length*bouy_length)}" ixy="0.0" ixz="0.0"
                    iyy="${bouy_mass / 12.0 * (3*(bouy_radius*bouy_radius + bouy_i_radius*bouy_i_radius) + bouy_length*bouy_length)}" iyz="0.0"
                    izz="${bouy_mass / 12.0 * 3*(bouy_radius*bouy_radius + bouy_i_radius*bouy_i_radius)}"/>
            </inertial>
        </link>
    </xacro:macro>

    <!-- macro for thrusters -->
    <xacro:macro name="thruster" params="position">
        <link name="${position}_thruster_link">
            <collision>
                <origin xyz="0.1 ${thruster_radius} ${-1*thruster_radius} " rpy="0 ${PI/2} 0"/>
                <geometry>
                    <cylinder length="${thruster_length}" radius="${thruster_radius}"/>
                </geometry>
            </collision>

            <visual>
                <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
                <!-- <geometry>
                    <cylinder length="${thruster_length}" radius="${thruster_radius}"/>
                </geometry>
                <material name="black"/> -->
                <geometry>
                    <mesh filename="package://auv_ros_description/meshes/T200-THRUSTER-BLUEESC-R1.dae"
                        scale="0.001 0.001 0.001"/>
                </geometry>
            </visual>

            <inertial>
                <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
                <mass value="${thruster_mass}"/>
                <inertia
                    ixx="${thruster_mass / 12.0 * (3*thruster_radius*thruster_radius + thruster_length*thruster_length)}" ixy="0.0" ixz="0.0"
                    iyy="${thruster_mass / 12.0 * (3*thruster_radius*thruster_radius + thruster_length*thruster_length)}" iyz="0.0"
                    izz="${thruster_mass / 2.0 * thruster_radius*thruster_radius}"/>
            </inertial>
        </link>
    </xacro:macro>


    <!-- Used for fixing robot to Gazebo 'base_link' -->
    <!-- link name="world"/>

    <joint name="board_joint" type="planar">
        <axis xyz="0 0 1"/>
        <parent link="world"/>
        <child link="base_link"/>
    </joint-->

    <!-- Base Link -->
    <link name="base_link">
        <collision>
            <origin xyz="0 0 ${board_thickness/2}" rpy="0 0 0"/>
            <geometry>
                <box size="${board_width} ${board_width} ${board_thickness}"/>
            </geometry>
        </collision>

        <visual>
            <origin xyz="0 0 ${board_thickness/2}" rpy="0 0 0"/>
            <geometry>
                <box size="${board_width} ${board_width} ${board_thickness}"/>
            </geometry>
            <material name="white"/>
        </visual>

        <inertial>
            <origin xyz="0 0 ${board_thickness/2}" rpy="0 0 0"/>
            <mass value="${board_mass}"/>
            <inertia
                ixx="${board_mass / 12.0 * (board_width*board_width + board_thickness*board_thickness)}" ixy="0.0" ixz="0.0"
                iyy="${board_mass / 12.0 * (board_thickness*board_thickness + board_width*board_width)}" iyz="0.0"
                izz="${board_mass / 12.0 * (board_width*board_width + board_width*board_width)}"/>
        </inertial>
    </link>

    <!-- left bouy joint -->
    <joint name="left_bouy_joint" type="fixed">
        <parent link="base_link"/>
        <child link="left_bouy_link"/>
        <origin xyz="0 ${board_width/4} ${board_thickness + bouy_radius}" rpy="0 0 0"/>
    </joint>

    <!-- left bouy Link -->
    <xacro:bouy position="left"/>

    <!-- right bouy joint -->
    <joint name="right_bouy_joint" type="fixed">
        <parent link="base_link"/>
        <child link="right_bouy_link"/>
        <origin xyz="0 ${-1*board_width/4} ${board_thickness + bouy_radius}" rpy="0 0 0"/>
    </joint>

    <!-- right bouy Link -->
    <xacro:bouy position="right"/>

    <!-- left thruster joint -->
    <joint name="left_thruster_joint" type="fixed">
        <axis xyz="1 0 0" />
        <parent link="base_link"/>
        <child link="left_thruster_link"/>
        <origin xyz="${-1*board_width/2} ${board_width/2-2*thruster_radius} ${-0.5*board_thickness-2*thruster_radius}" rpy="${PI/2} 0 0"/>
    </joint>

    <!-- left thruster Link -->
    <xacro:thruster position="left"/>

    <!-- right thruster joint -->
    <joint name="right_thruster_joint" type="fixed">
        <axis xyz="1 0 0" />
        <parent link="base_link"/>
        <child link="right_thruster_link"/>
        <origin xyz="${-1*board_width/2} ${-1*board_width/2} ${-0.5*board_thickness-2*thruster_radius}" rpy="${PI/2} 0 0"/>
    </joint>

    <!-- right thruster Link -->
    <xacro:thruster position="right"/>

    <!-- sensor box joint-->
    <joint name="sensor_box_joint" type="fixed">
        <parent link="base_link"/>
        <child link="sensor_box_link"/>
        <origin xyz="0 0 ${board_thickness + 2*bouy_radius}" rpy="0 0 0"/>
    </joint>

    <!-- sensor box -->
    <link name="sensor_box_link">
        <collision>
            <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
            <geometry>
                <cylinder length="${sensor_box_length}" radius="${sensor_box_radius}"/>
            </geometry>
        </collision>

        <visual>
            <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
            <geometry>
                <cylinder length="${sensor_box_length}" radius="${sensor_box_radius}"/>
            </geometry>
            <material name="blue"/>
        </visual>

        <inertial>
            <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
            <mass value="${sensor_box_mass}"/>
            <inertia
                ixx="${sensor_box_mass / 12.0 * (3*sensor_box_radius*sensor_box_radius + sensor_box_length*sensor_box_length)}" ixy="0.0" ixz="0.0"
                iyy="${sensor_box_mass / 12.0 * (3*sensor_box_radius*sensor_box_radius + sensor_box_length*sensor_box_length)}" iyz="0.0"
                izz="${sensor_box_mass / 2.0 * sensor_box_radius*sensor_box_radius}"/>
        </inertial>
    </link>
</robot>
